<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis集群</title>
      <link href="/2021/10/26/redis-ji-qun/"/>
      <url>/2021/10/26/redis-ji-qun/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h2><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><h5 id="主从复制简介"><a href="#主从复制简介" class="headerlink" title="主从复制简介"></a>主从复制简介</h5><p>互联网三高架构：<strong>高并发</strong>，<strong>高性能</strong>，<strong>高可用</strong></p><p><strong>单机Redis的风险与问题</strong></p><p><img src="/2021/10/26/redis-ji-qun/image-20211026195558889.png" alt="单机Redis的风险与问题"></p><p><strong>解决方法</strong></p><p><img src="/2021/10/26/redis-ji-qun/image-20211026195639258.png" alt="解决方法"></p><h6 id="多台服务器连接方案"><a href="#多台服务器连接方案" class="headerlink" title="多台服务器连接方案"></a><strong>多台服务器连接方案</strong></h6><ul><li><p>提供数据方 : master<br>主服务器，主节点，主库<br>主客户端</p></li><li><p>接收数据方： slave<br>从服务器，从节点，从库<br>从客户端</p></li><li><p>需要解决的问题<br>数据同步</p></li><li><p>核心工作</p><p>master的数据复制到slave中</p></li></ul><p><img src="/2021/10/26/redis-ji-qun/image-20211026195941790.png" alt="多台服务器连接方案"></p><h6 id="主从复制详情"><a href="#主从复制详情" class="headerlink" title="主从复制详情"></a>主从复制详情</h6><p>主从复制即将master中的数据即时，有效的复制到slave中<br>特征：一个master可以拥有多个slave,一个slave只能对应一个master</p><p><strong>职责</strong></p><ul><li><p>master</p><ul><li>写数据</li><li>执行写操作，将出现变化的数据自动同步到slave</li><li>读数据(可忽略)</li></ul></li><li><p>salve</p><ul><li>读数据</li><li>写数据(禁止)</li></ul></li></ul><p><strong>高可用集群</strong></p><p>可以多层</p><p><img src="/2021/10/26/redis-ji-qun/image-20211026200704566.png" alt="高可用集群"></p><p><strong>主从复制的作用</strong></p><ul><li>读写分离：master写，slave读，提高服务器的读写负载能力</li><li>负载均衡：基于主从结构，读写分离，由slave分担master负载，并根据需求的变化，改变slave的数量，通过多个从节点分担数据读取负载，大大提高Redistribution服务器并发量与数据吞吐量</li><li>故障恢复：当master出现问题时，由slave提供服务，实现快速的故障恢复</li><li>数据冗余：当实现数据热备份，是持久化之外的一种数据冗余方式</li><li>高可用基石：基于主从复制，构建哨兵模式与集群，实现Redis的高可用方案</li></ul><h6 id="主从复制工作流程"><a href="#主从复制工作流程" class="headerlink" title="主从复制工作流程"></a>主从复制工作流程</h6><p><strong>主从复制三个阶段</strong></p><p><img src="/2021/10/26/redis-ji-qun/image-20211026201535102.png" alt="主从复制三个阶段"></p>]]></content>
      
      
      
        <tags>
            
            <tag> nosql </tag>
            
            <tag> redis </tag>
            
            <tag> 集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>瞧瞧我发现了什么</title>
      <link href="/2021/10/26/qiao-qiao-wo-fa-xian-liao-shi-me/"/>
      <url>/2021/10/26/qiao-qiao-wo-fa-xian-liao-shi-me/</url>
      
        <content type="html"><![CDATA[<p><span class="github-emoji"><span>🐷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f437.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><span class="github-emoji"><span>🐶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f436.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><span class="github-emoji"><span>🐱</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f431.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><span class="github-emoji"><span>🐘</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f418.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><span class="github-emoji"><span>🚋</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f68b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>:happy:</p><p><span class="github-emoji"><span>❤</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      
        <tags>
            
            <tag> good </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis高级</title>
      <link href="/2021/10/25/redis-gao-ji/"/>
      <url>/2021/10/25/redis-gao-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis高级"><a href="#Redis高级" class="headerlink" title="Redis高级"></a>Redis高级</h1><h2 id="liunx中Redi使用"><a href="#liunx中Redi使用" class="headerlink" title="liunx中Redi使用"></a>liunx中Redi使用</h2><ul><li><p>redis指定端口启动</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">redis-server --port 6379redis-cli -p 6379<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以进行多数据库使用，多端口设置，同时启动多个数据库</p></li><li><p>配置文件启动<br>redis.conf是redis的配置文件，新建配置文件redis-6379.conf，复制原文件，修改：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">daemonize  yes  //守护进程方式,日志会输出到日志文件logfile""//日志文件名称，dir   路径//生成文件位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">redis-server   redis-6379.conf (配置文件名)//通过配置文件启动<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建conf目录，用来你管理自己的配置文件</p></li></ul><h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><h4 id="持久-化介绍"><a href="#持久-化介绍" class="headerlink" title="持久 化介绍"></a>持久 化介绍</h4><h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><ul><li>Redis运行在内存上，数据容易丢失，需要持久化保存在硬盘上，防止数据丢失</li></ul><h5 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h5><ul><li>数据(快照)RDB：<br>将当前数据状态进行保存，快照形式，存储数据结果，存储格式简单，关注点在数据</li><li>过程(日志)：<br>将当前数据的操作过程进行保存，日志形式，存储操作过程，存储格式复杂，关注点在操作过程</li></ul><h4 id="RDB持久化详情"><a href="#RDB持久化详情" class="headerlink" title="RDB持久化详情"></a>RDB持久化详情</h4><h5 id="第一种RDB-启动方式"><a href="#第一种RDB-启动方式" class="headerlink" title="第一种RDB 启动方式"></a>第一种RDB 启动方式</h5><h6 id="命令启动"><a href="#命令启动" class="headerlink" title="命令启动"></a>命令启动</h6><ul><li>命令</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>作用:  </p><p>保存数据,生成rdb文件，将数据保存在文件中</p></li></ul><p><strong>在配置文件中修改</strong></p><ul><li><p>dbfilename  dump.rdb</p><p>说明：设置本地数据库文件名，默认为dump.rdb</p><p>经验：通常设置为dump-<strong>端口号</strong>.rdb</p></li><li><p>dir </p><p>说明：设置存储.rdb文件的路径。</p><p>经验：通常设置成储存空间较大的目录中，目录名为<strong>data</strong></p></li><li><p>rdbcompression yes<br>说明：设置存储至本地数据库时是否压缩数据，默认为yes ，采用LZF压</p><p>经验：通常默认为开启状态，如果设置为no,可以节省CPU运行时间，但会使存储的文件变大(巨大)</p></li><li><p>rdbchecksum yes<br>说明：设置是否进行RDB文件校验，该校验过程在读文件和写文件过程均进行</p><p>经验：通常默认为开启状态，如果设置为no，可以节约读写过程约10%时间消耗，但是存在一定的数据损坏风险</p></li></ul><h6 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h6><ul><li><p>启动时自动恢复数据<br>数据库自己读取数据文件，恢复数据</p></li><li><p>save工作原理</p><p>Redis 为单线程执行,执行save指令会阻塞当前服务器，直到RDB 过程完成，可能会造成长时间阻塞，不建议线上使用</p></li></ul><h5 id="第二种RDB-启动方式-后台启动"><a href="#第二种RDB-启动方式-后台启动" class="headerlink" title="第二种RDB 启动方式(后台启动)"></a>第二种RDB 启动方式(后台启动)</h5><ul><li><p>命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">bgsave<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>作用<br>手动给数据库发送命令，但不立即执行。空闲时间数据库进行处理</p></li><li><p>工作原理</p><p><img src="/2021/10/25/redis-gao-ji/image-20211025193733206.png" alt="工作原理"></p></li><li><p>注意<br>bgsave命令是支队save阻塞问题做的优化。Redis内部涉及到RDB操作都建议使用bgsave。</p></li><li><p>stop-writes-on-basave-error yes</p><p>说明：后台存储过程如果出现错误现象，是否停止操作</p><p>经验：通常默认为开启状态</p></li></ul><h5 id="第三种RDB-启动方式-配置启动"><a href="#第三种RDB-启动方式-配置启动" class="headerlink" title="第三种RDB 启动方式(配置启动)"></a>第三种RDB 启动方式(配置启动)</h5><ul><li><p>根据配置自动启动,在配置文件中配置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">save second changes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>作用</p><pre><code>满足限定时间范围内key的变化数量达到指定数量即进行持久化</code></pre></li><li><p>参数<br>second：监控时间范围<br>changes：监控key的变化量</p></li><li><p>范例</p><pre class="line-numbers language-shel" data-language="shel"><code class="language-shel">save 900 1save 300 10save 60 10000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="RDB三种启动方式对比"><a href="#RDB三种启动方式对比" class="headerlink" title="RDB三种启动方式对比"></a>RDB三种启动方式对比</h5><p><img src="/2021/10/25/redis-gao-ji/image-20211025195756349.png" alt="RDB三种启动方式对比"></p><h6 id="RDB特殊启动方式"><a href="#RDB特殊启动方式" class="headerlink" title="RDB特殊启动方式"></a>RDB特殊启动方式</h6><ul><li><p>服务器运行过程中重启</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">debug reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>关闭服务器是保存指定数据</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">shutdown save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="RDB优缺点"><a href="#RDB优缺点" class="headerlink" title="RDB优缺点"></a>RDB优缺点</h5><ul><li><p>优点</p><p><img src="/2021/10/25/redis-gao-ji/image-20211025200129180.png" alt="优点"></p></li><li><p>缺点<br><img src="/2021/10/25/redis-gao-ji/image-20211025200150998.png" alt="缺点"></p></li></ul><h4 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h4><p><img src="/2021/10/25/redis-gao-ji/image-20211025220521099.png" alt="RDB的弊端"></p><ul><li><p>不记录全数据，仅记录部分数据</p></li><li><p>记录操作记录</p></li></ul><h5 id="AOF概念"><a href="#AOF概念" class="headerlink" title="AOF概念"></a>AOF概念</h5><ul><li>AOF(append only file )持久化： 以独立日志的方式记录每次命令，重启时再重新之幸福AOF文件中的命令，达到恢复数据的作用，</li><li>改记录数据为记录数据产生的过程</li><li>主要作用是解决了数据持久化你的实时型，目前 已经是Redis持久化的主流方式</li></ul><h5 id="AOF写数据"><a href="#AOF写数据" class="headerlink" title="AOF写数据"></a>AOF写数据</h5><p><img src="/2021/10/25/redis-gao-ji/image-20211025221148941.png" alt="AOF写数据过程"></p><h6 id="AOF写数据三种策略"><a href="#AOF写数据三种策略" class="headerlink" title="AOF写数据三种策略"></a>AOF写数据三种策略</h6><ul><li><p>always(每次)</p><pre><code>每次写入操作均同步到AOF文件中，**数据零误差，性能较低 不建议使用**</code></pre></li><li><p>everysec(每次)<br>每秒将缓冲区中的指令同步到AOF文件中，<strong>数据准确性较高，性能较高 是默认配置</strong><br>再系统宕机的情况下丢失一秒的数据</p></li><li><p>no(系统控制)、</p><p>由操作系统控制每次同步到AOF文件的周期，整体过程不可控</p></li></ul><h6 id="AOF功能开启"><a href="#AOF功能开启" class="headerlink" title="AOF功能开启"></a>AOF功能开启</h6><ul><li><p>配置</p><pre class="line-numbers language-none"><code class="language-none">appendonly yes|no<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>作用<br>是否开启AOF默认持久化功能，默认为不开启</p></li><li><p>配置</p><pre class="line-numbers language-none"><code class="language-none">apppendfsync always|everysec|no<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>作用<br>AOF写数据策略</p></li></ul><h6 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h6><p><img src="/2021/10/25/redis-gao-ji/image-20211025222553087.png" alt="AOF重写"></p><h6 id="AOF重写规则"><a href="#AOF重写规则" class="headerlink" title="AOF重写规则"></a>AOF重写规则</h6><ul><li><p>进程内已超时的数据不再写入文件</p></li><li><p>忽略无效指令，重写是使用进程内数据直接生成，这样新的AOF文件只保留最终数据的写入文件</p></li><li><p>对同一数据的多条写命令合并成一条命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">如 lpush list 1 a ,lpush list1 b -----&gt;lpush list1 a b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为防止数据量过大造成客户端缓冲区溢出，对list,set,hash,zset等类型，每条指令最多写入64个元素</p></li></ul><h6 id="AOF自动重写触发条件设置"><a href="#AOF自动重写触发条件设置" class="headerlink" title="AOF自动重写触发条件设置"></a>AOF自动重写触发条件设置</h6><ul><li><p>自动重写触发条件设置</p><pre class="line-numbers language-none"><code class="language-none">auto-aof-rewrite-min-size  s ize//达到比较大小重写auto-aof-rewrite-percentage percent//重写百分比<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>自动重写触发对比参数</p><pre class="line-numbers language-none"><code class="language-none">aof_current_sizeaof_base_size<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>自动重写触发条件</p><p><img src="/2021/10/25/redis-gao-ji/image-20211025224108323.png" alt="自动重写触发条件"></p></li></ul><h6 id="AOF重写工作原理"><a href="#AOF重写工作原理" class="headerlink" title="AOF重写工作原理"></a>AOF重写工作原理</h6><p><img src="/2021/10/25/redis-gao-ji/image-20211025224856532.png" alt="AOF重写工作原理"></p><p><img src="/2021/10/25/redis-gao-ji/image-20211025225010472.png" alt="AOF重写工作原理"></p><h4 id="RDB与AOF区别"><a href="#RDB与AOF区别" class="headerlink" title="RDB与AOF区别"></a>RDB与AOF区别</h4><p><img src="/2021/10/25/redis-gao-ji/image-20211025225117159.png" alt="RDB vs AOF "></p><p><strong>RDB与AOF选择</strong></p><p><img src="/2021/10/25/redis-gao-ji/image-20211025225328795.png" alt="RDB与AOF选择"></p><h2 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h2><h5 id="1-事务简介"><a href="#1-事务简介" class="headerlink" title="1.事务简介"></a>1.事务简介</h5><ul><li>​    redis事务就是一个命令执行的队列，将一系列预定义命令包装成一个整体(一个队列).当执行时，一次性按照添加顺序依次执行，中途不会被打断或干扰</li><li>一个队列中，一次性，顺序性，排他性的执行局一系列命令</li></ul><h5 id="2-事务基本操作"><a href="#2-事务基本操作" class="headerlink" title="2.事务基本操作"></a>2.事务基本操作</h5><ul><li><p>开启事务: 设定事务的开启位置，此指令执行后，后续所有指令均加入到事务中</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">multi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>执行事务：设定事务的结束位置，同时执行事务，与multi成对出现，成对使用</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">exec<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>事务工作流程</strong></p><p><img src="/2021/10/25/redis-gao-ji/image-20211026151843167.png" alt="事务工作流程"></p><p><img src="/2021/10/25/redis-gao-ji/image-20211026151920696.png" alt="事务工作流程2"></p><p><strong>事务注意事项</strong></p><p><img src="/2021/10/25/redis-gao-ji/image-20211026152105726.png" alt="事务注意事项"></p><p>​    已经执行完毕的命令对应的数据不会自动回滚，需要程序员自己在代码中实现回滚</p><p><strong>手动进行事务回滚</strong></p><ul><li>记录操作过程中被影响的数据之前的状态<ul><li>单数据：string</li><li>多数据： hash,list,set,zset</li></ul></li><li>设置指令恢复所有的被修改的项、<ul><li>单数据：直接set(注意周边属性，例如时效)</li><li>多数据：修改对应值或整体克隆</li></ul></li></ul><h5 id="3-事务-锁"><a href="#3-事务-锁" class="headerlink" title="3.事务-锁"></a>3.事务-锁</h5><p>​    <strong>基于特定条件的事务操作-锁</strong></p><ul><li><p>对key添加监视锁，在执行exec前如果key发生了变化，终止事务执行</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">watch key1 [key2]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>取消对所有key的监视</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">unwatch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>基于特定条件的事务执行-分布式锁</strong>（设计概念）</p><ul><li><p>使用setnx设置一个公共锁</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">sentx lock-key value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用setnx，命令的返回值特征，有值则返回设置成功，无值则返回设置失败</p><ul><li>对于设置成功的，拥有控制权，进行下一步操作</li><li>设置失败的，不具有控制权，排队或等待</li></ul></li><li><p>操作完成删除公共锁</p><pre class="line-numbers language-none"><code class="language-none">del lock-key <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>释放锁，以供其他进程使用</p></li></ul><p><strong>分布式锁的死锁</strong></p><ul><li><p>由于多次加锁，可能出现加锁后未解锁，会出现死锁现象，其他用户无法使用，需要系统级保底方案</p></li><li><p>解决方案-加时效(到时效自动释放锁)</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">expire lock-key secondpexpire lock-key milliseconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="过期数据的删除策略"><a href="#过期数据的删除策略" class="headerlink" title="过期数据的删除策略"></a>过期数据的删除策略</h2><p><strong>redis中的数据特征</strong></p><p>redis是一种内存级数据库，所有的数据均被存放在内存中，内存中的数据可以通过TTL指令获取其状态</p><ul><li>XX：具有时效性的数据</li><li>-1：永久有效的数据</li><li>-2：<strong>已经过期的数据</strong>或被删除的数据或未被定义的</li></ul><h5 id="时效性数据的存储结构"><a href="#时效性数据的存储结构" class="headerlink" title="时效性数据的存储结构"></a>时效性数据的存储结构</h5><p><img src="/2021/10/25/redis-gao-ji/image-20211026160001175.png" alt="image-20211026160001175"></p><p><strong>目标：在内存占用和CPU占用之间寻找一种平衡</strong>。顾此失彼都会造成整体性能的下降，甚至引发服务器宕机或内存泄漏</p><h6 id="定时删除"><a href="#定时删除" class="headerlink" title="定时删除"></a>定时删除</h6><ul><li>创建一个定时器，当key设置有过期时间，且过期时间到达时，由定时器任务立即执行对键的删除操作</li><li>优点：节省内存，到时就删除，快速释放掉不必要的内存占用</li><li>缺点：CPU压力很大，无论CPU此时负载多高，均占用CPU，会影响redis服务器响应时间和指令你吞吐量</li><li>总结：用处理器性能换取存储空间(拿时间换空间)</li></ul><h6 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h6><ul><li>数据到达过期时间，不做处理，等下次访问数据时删除<ul><li>如果未过期，返回数据</li><li>如果已经过期，删除，返回不存在</li></ul></li><li>优点：节约CPU性能，发现必须删除的时候才删除</li><li>缺点：内存压力很大，出现长期占用内存的数据</li><li>总结：用存储空间换取处理器性能(空间换时间)</li></ul><h6 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h6><img src="/2021/10/25/redis-gao-ji/image-20211026161605435.png" alt="定期删除" style="zoom:120%;"><ul><li>周期性轮询redis库中的有时效数据，采用随机抽查的策略，利用过期数据占比的方式控制删除频率</li><li>特定1：CPU性能占用设置有峰值，检测频率可自己设置</li><li>特定2：内存压力不是很大，长期占用内存的冷数据会被持续清理</li><li>总结：周期性抽查内存空间(随机抽查，重点抽查)</li></ul><h6 id="删除策略对比"><a href="#删除策略对比" class="headerlink" title="删除策略对比"></a>删除策略对比</h6><p><img src="/2021/10/25/redis-gao-ji/image-20211026162142157.png" alt="删除策略对比"></p><h6 id="逐出算法"><a href="#逐出算法" class="headerlink" title="逐出算法"></a>逐出算法</h6><p><img src="/2021/10/25/redis-gao-ji/image-20211026162533027.png" alt="算法引出"></p><p><strong>影响数据逐出的相关配置</strong></p><ul><li><strong>最大可使用内存</strong>：<strong>maxmenory</strong><br>占用物理内存的比例，默认为0，表示不限制，生产环境中根据需求设定，通常设置在50%以上</li><li>每次<strong>选取待删除数据</strong>的个数：<strong>maxmenory-samples</strong><br>选取数据时并不会全全库扫描，导致严重的性能消耗，降低读写性能，因此采用随机获取数据的方式做为待检测删除的数据</li><li>删除策略：<strong>maxmerory -policy</strong><br>达到最大内存后的，对被挑选出来的数据进行删除的策略</li></ul><h6 id="逐出策略分类"><a href="#逐出策略分类" class="headerlink" title="逐出策略分类"></a>逐出策略分类</h6><p><img src="/2021/10/25/redis-gao-ji/image-20211026164422454.png" alt="逐出策略"></p><p>推荐：volatile-lru</p><pre class="line-numbers language-none"><code class="language-none">maxmemory-policy volatile-lru<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="服务器基础配置"><a href="#服务器基础配置" class="headerlink" title="服务器基础配置"></a>服务器基础配置</h2><h4 id="服务器设定"><a href="#服务器设定" class="headerlink" title="服务器设定"></a>服务器设定</h4><ul><li><p>设置服务器以守护进程的方式进行</p><pre class="line-numbers language-none"><code class="language-none">daemonize yse|no<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>绑定主机地址</p><pre class="line-numbers language-none"><code class="language-none">bind 127.0.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置服务器端口号</p><pre class="line-numbers language-none"><code class="language-none">port 6379<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置数据库数量</p><pre class="line-numbers language-none"><code class="language-none">databases 16<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h6 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h6><ul><li><p>设置服务器以指定日志级别记录</p><pre class="line-numbers language-none"><code class="language-none">loglevel debug|verbose|notice|warning<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>日志记录文件名</p><pre class="line-numbers language-none"><code class="language-none">logfile 端口号.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>注意</strong>：日志级别开发期设置为verbose即可，生产环境中配置为notice，简化日志输出量，降低写日志IO的频率</p><h6 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h6><ul><li><p>设置同一时间最大客户端连接数，默认无限制。当客户端连接达到上限，Redis会关闭新的连接</p><pre class="line-numbers language-none"><code class="language-none">maxclients 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>客户端闲置等待最大时长，达到最大值关闭连接，如需关闭该功能，设置为0</p><pre class="line-numbers language-\" data-language="\"><code class="language-\">timeout 300<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h6 id="多服务器快捷配置"><a href="#多服务器快捷配置" class="headerlink" title="多服务器快捷配置"></a>多服务器快捷配置</h6><ul><li><p>导入并加载指定配置文件信息，用于快速创建redis公共配置较多的redis实例配置文件,便于维护</p><pre class="line-numbers language-none"><code class="language-none">include /path/server-端口号。conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="Redis-高级数据类型"><a href="#Redis-高级数据类型" class="headerlink" title="Redis 高级数据类型"></a>Redis 高级数据类型</h2><p>具有明显的模型特征，为解决具体的业务而生</p><h5 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h5><h6 id="bitmaps类型的基本操作"><a href="#bitmaps类型的基本操作" class="headerlink" title="bitmaps类型的基本操作"></a>bitmaps类型的基本操作</h6><ul><li><p>获取指定key对应偏移量上的bit值</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">getbit key offset<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置指定key对应偏移量上的bit值，value只能是1或0</p><pre class="line-numbers language-none"><code class="language-none">setbit key offset value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h6 id="bitmaps类型的扩展操作"><a href="#bitmaps类型的扩展操作" class="headerlink" title="bitmaps类型的扩展操作"></a>bitmaps类型的扩展操作</h6><ul><li><p>对指定key进行按位交，并，非，异或操作，并将结果保存到destkey中</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">bitop op destkey key1 [key2]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>and :交</li><li>or : 并</li><li>not :非</li><li>xor : 异或</li></ul></li><li><p>统计指定key中1的数量<span class="github-emoji"><span>🐷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f437.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">bitcount key [start end]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h5><p>统计不重复的数据的数量,应用于独立数据的统计</p><p><strong>统计原始</strong>UV</p><ul><li><p>原始方案：set</p><p>存储每个用户的ID</p></li><li><p>改进方案：Bitmaps<br>存储每个用户的状态(bit)</p></li><li><p>全新方案：HyperLogLog</p></li></ul><p>基数：<strong>基数是数据集去重后元素个数</strong></p><p><img src="/2021/10/25/redis-gao-ji/image-20211026192020297.png" alt="基数"></p><p>HyperLogLog是用来做基数统计的，运用了LogLog的算法</p><p><strong>LogLog算法</strong></p><p><img src="/2021/10/25/redis-gao-ji/image-20211026192143670.png" alt="LogLog算法"></p><h6 id="HyperLogLog的基本操作"><a href="#HyperLogLog的基本操作" class="headerlink" title="HyperLogLog的基本操作"></a>HyperLogLog的基本操作</h6><ul><li><p>添加数据</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">pfadd key element [element ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>统计数据</p><pre class="line-numbers language-none"><code class="language-none">pfcount key [key ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>合并数据</p><pre class="line-numbers language-none"><code class="language-none">pfmerge destkey sourcekey [sourcekey ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>相关说明</strong></p><ul><li>用于进行基数统计，不是集合，不保存数据，只记录数量而不是具体数据</li><li>核心是基数估算算法，最终值存在一定误差</li><li>误差范围：基数估计的结果是一个带有0。81%标准误差的近似值</li><li>消耗空间极小，每个HyperLogLog占用了12K的内存用于标记基数</li><li>不是一次分配12K内存，随着基数增加而增加</li><li>pfmerge命令合并后占用的存储空间为12K，无论之前数据量是多少</li></ul><h5 id="GEO"><a href="#GEO" class="headerlink" title="GEO"></a>GEO</h5><p>设置坐标点，计算坐标点的距离(二维)(经纬？)(估算)</p><h6 id="GEO的基本操作"><a href="#GEO的基本操作" class="headerlink" title="GEO的基本操作"></a>GEO的基本操作</h6><ul><li><p>添加坐标点</p><pre class="line-numbers language-none"><code class="language-none">geoadd key(容器) longitude(X) latitude(Y) member(地点) [longitude latitude member ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取坐标点</p><pre class="line-numbers language-none"><code class="language-none">geopos key member [member ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>计算坐标点距离</p><pre class="line-numbers language-none"><code class="language-none">geodist key member1 member2 [unit(单位)]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>根据坐标求范围内的数据</p><pre class="line-numbers language-none"><code class="language-none">georadius key longitude latitude radius(距离) m|km|ft|mi [withcoord] [withdist] [withhash] [count count]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>根据点求范围内数据</p><pre class="line-numbers language-none"><code class="language-none">georadiusbymember key member radius(距离) m|km|ft|mi(单位) [withcoord] [withdist(显示距离)] [withhash(显示坐标)] [count count]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取指定点对应的坐标hash值</p><pre class="line-numbers language-none"><code class="language-none">gechash  key member [member]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>这个部分结束了:happy:</p><p>下次见<span class="github-emoji"><span>🤚</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f91a.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> nosql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jedis_study</title>
      <link href="/2021/10/24/jedis-study/"/>
      <url>/2021/10/24/jedis-study/</url>
      
        <content type="html"><![CDATA[<h1 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h1><h3 id="Jedis简介"><a href="#Jedis简介" class="headerlink" title="Jedis简介"></a>Jedis简介</h3><p>jedis: Java语言连Redis数据库的工具</p><h3 id="Jedis使用"><a href="#Jedis使用" class="headerlink" title="Jedis使用"></a>Jedis使用</h3><h4 id="Jedis简单使用"><a href="#Jedis简单使用" class="headerlink" title="Jedis简单使用"></a>Jedis简单使用</h4><ol><li><p>导包</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//插入数据</span><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//1.连接Redis</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.操作Redis</span>        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"wang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.关闭连接</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//获取数据</span><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//1.连接Redis</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.操作Redis</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.关闭连接</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/10/24/jedis-study/image-20211024220538551.png" alt="获取数据"></p></li></ol><h5 id="操作list数据类型"><a href="#操作list数据类型" class="headerlink" title="操作list数据类型"></a>操作list数据类型</h5><ol><li><p>代码展示</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment">//1.连接Redis</span>       <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//2.操作Redis</span>       jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"list1"</span><span class="token punctuation">,</span><span class="token string">"a1"</span><span class="token punctuation">,</span><span class="token string">"a2"</span><span class="token punctuation">,</span><span class="token string">"a3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       jedis<span class="token punctuation">.</span><span class="token function">rpush</span><span class="token punctuation">(</span><span class="token string">"list1"</span><span class="token punctuation">,</span><span class="token string">"b1"</span><span class="token punctuation">,</span><span class="token string">"b2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list1 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"list1"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> string <span class="token operator">:</span> list1<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token comment">//3.关闭连接</span>       jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>结果展示<br><img src="/2021/10/24/jedis-study/image-20211024221049216.png" alt="结果展示"></p></li></ol><h5 id="操作hash数据类型"><a href="#操作hash数据类型" class="headerlink" title="操作hash数据类型"></a>操作hash数据类型</h5><ol><li><p>代码展示</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//1.连接Redis</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.操作Redis</span>        jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"hash1"</span><span class="token punctuation">,</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"wang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"hash1"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"hash1"</span><span class="token punctuation">,</span><span class="token string">"address"</span><span class="token punctuation">,</span><span class="token string">"xian"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> hash1 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">"hash1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hash1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.关闭连接</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>结果展示<br><img src="/2021/10/24/jedis-study/image-20211024221552156.png" alt="结果展示-hash"></p></li></ol><h4 id="Jedis工具类"><a href="#Jedis工具类" class="headerlink" title="Jedis工具类"></a>Jedis工具类</h4><h5 id="基于连接池获取连接"><a href="#基于连接池获取连接" class="headerlink" title="基于连接池获取连接"></a>基于连接池获取连接</h5><ul><li><p>jedispool:Jedis提供的连接池技术<br>poolConfig: 连接池配置对象</p><p>host:reids 服务地址</p><p>port：redis服务端口号</p></li><li><p>代码展示</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">JedisPool</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">JedisPoolConfig</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">JedisPool</span> jp<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">JedisPoolConfig</span> jpc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jpc<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最大连接池数</span>        jpc<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最大连接数</span>         jp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>jpc<span class="token punctuation">,</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token class-name">Jedis</span> <span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> jp<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>改进</p><p>建立redis.properties</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">redis.host</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1</span><span class="token attr-name">redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span class="token attr-name">redis.maxTotal</span><span class="token punctuation">=</span><span class="token attr-value">30</span><span class="token attr-name">redis.maxIdle</span><span class="token punctuation">=</span><span class="token attr-value">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">JedisPool</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">JedisPoolConfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ResourceBundle</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">JedisPool</span> jp<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment">//获取配置文件</span>        <span class="token class-name">ResourceBundle</span>  rb<span class="token operator">=</span> <span class="token class-name">ResourceBundle</span><span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token string">"redis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JedisPoolConfig</span> jpc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jpc<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"redis.maxTotal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最大连接数</span>        jpc<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"redis.maxIdle"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//最小连接数</span>         jp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>jpc<span class="token punctuation">,</span>rb<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"redis.host"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"redis.port"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token class-name">Jedis</span> <span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> jp<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Jedis </tag>
            
            <tag> nosql </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my-live-and-my-love</title>
      <link href="/2021/10/24/my-live-and-my-love/"/>
      <url>/2021/10/24/my-live-and-my-love/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> live-and-love </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给懒懒炫耀一下</title>
      <link href="/2021/10/23/gei-lan-lan-xuan-yao-yi-xia/"/>
      <url>/2021/10/23/gei-lan-lan-xuan-yao-yi-xia/</url>
      
        <content type="html"><![CDATA[<h1 id="你看到的都是我想让你看到的"><a href="#你看到的都是我想让你看到的" class="headerlink" title="你看到的都是我想让你看到的"></a>你看到的都是我想让你看到的</h1><h2 id="你看到的都是我想让你看到的-1"><a href="#你看到的都是我想让你看到的-1" class="headerlink" title="你看到的都是我想让你看到的"></a>你看到的都是我想让你看到的</h2><h3 id="你看到的都是我想让你看到的-2"><a href="#你看到的都是我想让你看到的-2" class="headerlink" title="你看到的都是我想让你看到的"></a>你看到的都是我想让你看到的</h3><h4 id="你看到的都是我想让你看到的-3"><a href="#你看到的都是我想让你看到的-3" class="headerlink" title="你看到的都是我想让你看到的"></a>你看到的都是我想让你看到的</h4><h5 id="你看到的都是我想让你看到的-4"><a href="#你看到的都是我想让你看到的-4" class="headerlink" title="你看到的都是我想让你看到的"></a>你看到的都是我想让你看到的</h5><h6 id="你看到的都是我想让你看到的-5"><a href="#你看到的都是我想让你看到的-5" class="headerlink" title="你看到的都是我想让你看到的"></a>你看到的都是我想让你看到的</h6><p>我发现了什么？</p><p>懒懒是<span class="github-emoji"><span>🐷</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f437.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🐖</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f416.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      
        <tags>
            
            <tag> lanlan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git_study</title>
      <link href="/2021/10/23/git-do/"/>
      <url>/2021/10/23/git-do/</url>
      
        <content type="html"><![CDATA[<h1 id="Github使用"><a href="#Github使用" class="headerlink" title="Github使用"></a>Github使用</h1><h2 id="github文件区域"><a href="#github文件区域" class="headerlink" title="github文件区域"></a>github文件区域</h2><pre class="line-numbers language-none"><code class="language-none">1.工作区 workspace未跟踪与未暂存文件处于本区2.暂存区 index提交到仓库之前的缓存区3.仓库* 本地仓库* 远程仓库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GitHub文件状态"><a href="#GitHub文件状态" class="headerlink" title="GitHub文件状态"></a>GitHub文件状态</h2><pre><code>1.未跟踪 untracked    新创建一个文件，处于未跟踪状态，文件位于工作区。2.未暂存 unstaged    修改一个文件，处于未暂存状态，文件位于工作区。3.已暂存     为暂存与为跟踪文件初步提交变为已暂存4.已提交5.不需管理    创建 .gitingore文件，在其中说明不需管理的文件</code></pre><h2 id="GitHub常用命令"><a href="#GitHub常用命令" class="headerlink" title="GitHub常用命令"></a>GitHub常用命令</h2><pre><code>1. git init 初始化git仓库(*)2. git add 工作区文件提交到暂存区  状态：工作区 -&gt; 暂存区    add . :添加所有文件到暂存区    add 文件名 :提交单个文件(*)3. git commit  提交到仓库  暂存区 -&gt; 本地仓库    git commit -m "'说明/标记'"4. git status 查看状态(*)5. git log     打印提交记录(日志)    log --all 显示所有分支    log --pretty=oneline  将提交信息显示为一行    log --abbrey-commit 使得输出的commit更简短    log --graph 以图的方式显示(*)6.git reset --hard commitID(提交记录)  版本回退 还原以前版本7.git reflog 查看删除记录（回滚之后可以看到已经删除的提交记录，包含commit记录）</code></pre><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><pre class="line-numbers language-none"><code class="language-none">为了进行协同开发时，各个用户开发之间互不影响。工作区只能为一个分支进行服务每个分区(*)- git branch   查看本地分支-git branch vv 详细信息(*)- git branch  name(分支名称)  创建新分支  (*)- git checkout name   切换分支(*)- git checkout -b name  切换并创建分支(*)- git merge name  合并提交分支，一个分支上的提交可以合并到另一个分支(*)- git branch -d name 删除分支，删除时做各种检查，只能删除其他分支，不能删除当前分支。、- git branch -D name 强制删除，不做检查<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git远程仓库托管"><a href="#git远程仓库托管" class="headerlink" title="git远程仓库托管"></a>git远程仓库托管</h2><pre class="line-numbers language-none"><code class="language-none">- git config --global user.name username 用户名- git config --global user.email email 邮箱- ssh -keygen -t rsa 请求ssh密钥获取密钥后复制公钥到github,- cat ~/.ssh/id_rsa.pub 获取密钥- ssh -T git@github.com 验证是否连接成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-none"><code class="language-none">- git remote add name(名称）"url(ssh)" 绑定远程仓库- git remote 查看远程仓库- git push [-f]  [--set--upstream] [远端名称[本地分支名][远端分支名]]- git push name（仓库名） name(分支名称) 推送本地分支到远程仓库-git push --set --upstream name（仓库名） name(分支名称) 推送本地分支到远程仓库并建立和远端分支的关联关系-f 强制执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h4><pre class="line-numbers language-none"><code class="language-none">- git clone <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>远程仓库地址 [目录] 将远程仓库克隆到本地</strong></p><h4 id="抓取"><a href="#抓取" class="headerlink" title="抓取"></a>抓取</h4><pre class="line-numbers language-none"><code class="language-none">- git fetch [remote name](远程) [branch name](分支)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <strong>将仓库中的更新都拉取到本地，但不会进行合并</strong></p><h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><pre class="line-numbers language-none"><code class="language-none">- git merge (remote_name)/(branch_name)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>合并本地分支和远程分支</strong></p><h4 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h4><pre class="line-numbers language-none"><code class="language-none">- git pull [remote name] [branch name]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将仓库中的修改都拉到本地并进行合并，等于  fetch + merge</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-study</title>
      <link href="/2021/10/23/redis-study/"/>
      <url>/2021/10/23/redis-study/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis数据库"><a href="#Redis数据库" class="headerlink" title="Redis数据库"></a>Redis数据库</h1><h3 id="1-Redis基础"><a href="#1-Redis基础" class="headerlink" title="1.Redis基础"></a>1.Redis基础</h3><h5 id="1-1关系型数据库"><a href="#1-1关系型数据库" class="headerlink" title="1.1关系型数据库"></a>1.1关系型数据库</h5><p>​        关系型数据库：磁盘IO性能低下，数据关系复杂，扩展性差，不利于大规模集群</p><p>​        解决思路：</p><ul><li>降低磁盘IO次数 –&gt;内存存储</li><li>去除数据间关系  –&gt;不存储关系，仅存储数据</li></ul><h5 id="1-2非关系型数据库NOSQL"><a href="#1-2非关系型数据库NOSQL" class="headerlink" title="1.2非关系型数据库NOSQL"></a>1.2非关系型数据库NOSQL</h5><p>NoSQL： Not-Only-SQL (泛指非关系型的数据库)，作为关系型数据库的补冲</p><p>作用： 应对基于海量用户和海量数据前提下的数据处理关系</p><p>特征：</p><ul><li>可扩容，可伸缩</li><li>大数据下高性能</li><li>灵活的数据模型</li><li>高可用</li></ul><p>常见NoSQL数据库：</p><ul><li>Redis</li><li>MongDB</li><li>memcache</li><li>tair</li></ul><h5 id="1-3-Redis"><a href="#1-3-Redis" class="headerlink" title="1.3 Redis"></a>1.3 Redis</h5><p>概念: Redis是用C语言开发的一个开源的<strong>高性能键值对(key-value)数据库</strong></p><p>特征：</p><ol><li> 数据间没有必然的关联关系</li><li> 内部采用单线程机制进行工作</li><li> 高性能</li><li>多数据类型支持<ul><li>字符串类型         string</li><li>列表类型           list</li><li>散列类型           hash</li><li>集合类型           set</li><li>有序集合类型   sorted_set</li></ul></li><li> 持久化支持，可以进行数据灾难恢复</li></ol><p>应用：</p><ul><li>热点数据加速查询。</li><li>任务队列，如秒杀，抢购等。</li><li>即时信息查看，排行榜，统计信息等。</li><li>时效信息控制，如验证码。</li><li>分布式数据共享，如分布式架构中的session分离</li><li>消息队列</li><li>分布式锁</li></ul><h5 id="1-4-Redis的基本操作"><a href="#1-4-Redis的基本操作" class="headerlink" title="1.4 Redis的基本操作"></a>1.4 Redis的基本操作</h5><h6 id="a-命令行指令"><a href="#a-命令行指令" class="headerlink" title="a.命令行指令"></a>a.命令行指令</h6><ul><li><p>功能性命令<br>set  key value         存储数据</p><p>get key                     获取数据</p></li><li><p>清除屏幕信息<br>clear                         清除屏幕信息</p></li><li><p>帮助信息查询<br>help  get                   获取get帮助信息<br>help<br>help  set</p></li><li><p>退出<br>quit<br>exit</p></li></ul><h3 id="2-Redis数据类型"><a href="#2-Redis数据类型" class="headerlink" title="2.Redis数据类型"></a>2.Redis数据类型</h3><ul><li>Redis本身是一个Map，其中的数据类型都是key-value 的形式存储</li><li>数据类型指的是存储的数据的类型，也是value部分的类型</li></ul><p><img src="/2021/10/23/redis-study/image-20211024095746173.png" alt="image-20211024095746173"></p><h5 id="2-1-String类型"><a href="#2-1-String类型" class="headerlink" title="2.1 String类型"></a>2.1 String类型</h5><ul><li>存储的数据：单个数据，最简单的数据存储类型，也是最常用的数据类型。</li><li>存储数据的格式：一个存储空间保存一个数据</li><li>存储内容： 通常使用字符串，如果以整数的形式表示，可以作为数字操作使用</li></ul><h6 id="String类型数据的基本操作"><a href="#String类型数据的基本操作" class="headerlink" title="String类型数据的基本操作"></a>String类型数据的基本操作</h6><ul><li><p>添加/修改数据</p><pre class="line-numbers language-none"><code class="language-none">set key value <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取数据</p><pre class="line-numbers language-none"><code class="language-none">get key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除数据</p><pre class="line-numbers language-none"><code class="language-none">del key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="/2021/10/23/redis-study/image-20211024100337922.png" alt="image-20211024100337922"></p><ul><li><p>添加/修改多个数据</p><pre class="line-numbers language-none"><code class="language-none">mset key1 value1 key2 value2 ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取多个数据</p><pre class="line-numbers language-none"><code class="language-none">mget key1 key2 ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取数据字符个数(字符串长度)</p><pre class="line-numbers language-none"><code class="language-none">strlen key <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>追加信息到原始信息后部(如果原始信息在就追加,没有就新建)</p><pre class="line-numbers language-none"><code class="language-none">apppend key vaklue <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="/2021/10/23/redis-study/image-20211024100903392.png" alt="image-20211024100903392"></p><p><strong>单指令，多指令数据操作选择</strong></p><p><img src="/2021/10/23/redis-study/image-20211024101533114.png" alt="image-20211024101533114"></p><h6 id="String-类型数据的扩展操作"><a href="#String-类型数据的扩展操作" class="headerlink" title="String  类型数据的扩展操作"></a><strong>String  类型数据的扩展操作</strong></h6><p>数据需为整数型/浮点型进行操作</p><ul><li><p>设置数值数据增加指定范围的值</p><pre class="line-numbers language-none"><code class="language-none">incr key incrby key incrementincrbyfloat key increament<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>设置数值数据减少指定范围的值</p><pre class="line-numbers language-none"><code class="language-none">decr key decrby key increment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/10/23/redis-study/image-20211024102414465.png" alt="image-20211024102414465"></p></li><li><p>设置数据具有指定的生命周期</p><pre class="line-numbers language-none"><code class="language-none">setex ley seconds value psetex key milliseconds value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>秒/毫秒，赋予数据生命周期，时间到即失效，适用于具有生命周期的项目</p></li></ul><p><img src="/2021/10/23/redis-study/image-20211024103422749.png" alt="image-20211024103422749"></p><p><strong>String类型数据操作的注意事项</strong></p><p><img src="/2021/10/23/redis-study/image-20211024103655991.png" alt="image-20211024103655991"></p><p><strong>key的设置约定</strong></p><p><img src="/2021/10/23/redis-study/image-20211024104202645.png" alt="image-20211024104202645"></p><h5 id="2-2-hash类型"><a href="#2-2-hash类型" class="headerlink" title="2.2 hash类型"></a>2.2 hash类型</h5><p><strong>存储的困惑</strong></p><p><img src="/2021/10/23/redis-study/image-20211024104437831.png" alt="image-20211024104437831"></p><ul><li>存储形式： key-value(field1value1 field2 value2 )，一个储存空间保存多个键值对3</li><li>hash类型： 底层使用hash表实现数据存储<br>如果field数量较少，存储结构优化为类数组结构<br>如果filed数量较多，存储结构使用HashMap结构</li></ul><h6 id="hash类型数据的基本操作"><a href="#hash类型数据的基本操作" class="headerlink" title="hash类型数据的基本操作"></a>hash类型数据的基本操作</h6><ul><li><p>添加/修改数据</p><pre class="line-numbers language-none"><code class="language-none">hset key field value <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取数据</p><pre class="line-numbers language-none"><code class="language-none">hget key fieldhgetall key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>删除数据</p><pre class="line-numbers language-none"><code class="language-none">hdel key field1 [field2]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/10/23/redis-study/image-20211024105357611.png" alt="image-20211024105357611"></p></li><li><p>添加/修改多个数据</p><pre class="line-numbers language-none"><code class="language-none">hmset key field1 value1 field2 value2 ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取多个数据</p><pre class="line-numbers language-none"><code class="language-none">hmget key field1 field2 ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取哈希表中字段的数量</p><pre class="line-numbers language-none"><code class="language-none">hlen key <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取哈希表中是否存在指定的字段</p><pre class="line-numbers language-none"><code class="language-none">hexists key field<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/10/23/redis-study/image-20211024105854308.png" alt="image-20211024105854308"></p></li></ul><h6 id="hash类型数据库扩展操作"><a href="#hash类型数据库扩展操作" class="headerlink" title="hash类型数据库扩展操作"></a>hash类型数据库扩展操作</h6><ul><li><p>获取哈希表中所有的字段名或字段值</p><pre class="line-numbers language-none"><code class="language-none">hkeys key hvals key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>设置指定字段的数值数据增加指定范围的值</p><pre class="line-numbers language-none"><code class="language-none">hincrby key field incrementhincrbyfloat key field increment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/10/23/redis-study/image-20211024110251097.png" alt="hash"></p></li><li><p>保存field前判断，有则不变，无则添加</p><pre class="line-numbers language-none"><code class="language-none">hsetnx key field v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>注意事项</strong></p><p><img src="/2021/10/23/redis-study/image-20211024110442137.png" alt="注意事项"></p><h5 id="2-3-List类型"><a href="#2-3-List类型" class="headerlink" title="2.3 List类型"></a>2.3 List类型</h5><ul><li>数据储存需求： 存储多个数据，并对数据进入存储空间的顺序进行区分</li><li>需要的存储结构：一个存储空间保存多个数据，且通过数据可以体现进入数据</li><li>list类型： 保存多个数据，底层使用双向链表存储结构实现</li></ul><p><img src="/2021/10/23/redis-study/image-20211024143949025.png" alt="双向链表"></p><h6 id="list数据类型基本操作"><a href="#list数据类型基本操作" class="headerlink" title="list数据类型基本操作"></a>list数据类型基本操作</h6><h6 id=""><a href="#" class="headerlink" title=""></a></h6><ul><li><p>添加/修改数据</p><pre class="line-numbers language-none"><code class="language-none">lpush key value1 [value2] ...rpush key value1 [value2] ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取数据</p><pre class="line-numbers language-none"><code class="language-none">lrange key strat stoplindex key indexllen key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>获取并移除数据</p><pre class="line-numbers language-none"><code class="language-none">lpop keyrpop key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/10/23/redis-study/image-20211024145009483.png" alt="list基本操作"></p></li></ul><h6 id="list数据类型扩展操作"><a href="#list数据类型扩展操作" class="headerlink" title="list数据类型扩展操作"></a>list数据类型扩展操作</h6><ul><li><p>规定时间内获取并移除数据（阻塞式数据获取）</p><pre class="line-numbers language-none"><code class="language-none">blpop key1 [key2] timeout(时间)brpop key1 [key2] timeout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在等待时间内获取指定list（可以多个）中数据    并移除数据<br>等待时间结束有数据就取出来，没有为nil</p></li><li><p>移除指定数据 </p><pre class="line-numbers language-none"><code class="language-none">lrem key count value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>redis 应用于具有操作先后顺序的数据控制</li></ul><p><img src="/2021/10/23/redis-study/image-20211024150705698.png" alt="移除指定数据"></p></li></ul><p>list<strong>类型数据操作注意事项</strong></p><p><img src="/2021/10/23/redis-study/image-20211024151239326.png" alt="list类型数据操作注意事项"></p><h5 id="2-4-set类型"><a href="#2-4-set类型" class="headerlink" title="2.4 set类型"></a>2.4 set类型</h5><ul><li>新的存储需求：存储大量的数据，在查询方面提供更高的效率</li><li>需要的内存结构： 能够保存大量的数据，高效的内部存储机制，便于查询</li><li>set类型：与hash存储结构完全相同，仅存储键，不存储值（nil)，并且值是不允许重复的</li></ul><p><img src="/2021/10/23/redis-study/image-20211024152502163.png" alt="set结构"></p><ul><li>解：将原本的value存储到hash结构的key上.</li></ul><h6 id="set数据类型基本操作"><a href="#set数据类型基本操作" class="headerlink" title="set数据类型基本操作"></a>set数据类型基本操作</h6><h6 id="-1"><a href="#-1" class="headerlink" title=""></a></h6><ul><li><p>添加数据</p><pre class="line-numbers language-none"><code class="language-none">sadd key member1 [member2]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取全部数据</p><pre class="line-numbers language-none"><code class="language-none">smembers key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除</p><pre class="line-numbers language-none"><code class="language-none">srem key member1 [member2]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/10/23/redis-study/image-20211024153004958.png" alt="set基本操作"></p></li><li><p>获取集合数据总量</p><pre class="line-numbers language-none"><code class="language-none">scard key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>判断集合中是否包含指定数据</p><pre class="line-numbers language-none"><code class="language-none">sismember key member<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/10/23/redis-study/image-20211024153451228.png" alt="set基本操作2"></p></li></ul><h6 id="set数据类型扩展操作"><a href="#set数据类型扩展操作" class="headerlink" title="set数据类型扩展操作"></a>set数据类型扩展操作</h6><ul><li><p>随机获取集合中指定数量的数据</p><pre class="line-numbers language-none"><code class="language-none">srandmember key [count]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>随机获取集合中某个数据并移出集合</p><pre class="line-numbers language-none"><code class="language-none">spop key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/10/23/redis-study/image-20211024154110814.png" alt="set扩展操作"></p></li><li><p>求两个集合的交，并，差集</p><pre class="line-numbers language-none"><code class="language-none">sinter key1 key2sunion key1 key2sdiff key1 key2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/10/23/redis-study/image-20211024154800261.png" alt="set扩展操作"></p></li><li><p>求两个集合的交，并，差集并存储到指定集合中</p><pre class="line-numbers language-none"><code class="language-none">sinterstore destination key1 key2sunionstore destination key1 key2sdiffstore destination key1 key2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="/2021/10/23/redis-study/image-20211024155031844.png" alt="扩展操作3"></p><ul><li><p>将指定数据从原始集合中移动到目标集合中</p><pre class="line-numbers language-none"><code class="language-none">smove source destination member<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/10/23/redis-study/image-20211024155517114.png" alt="set扩展操作"></p></li></ul><p><strong>set类型数据操作的注意事项</strong></p><p><img src="/2021/10/23/redis-study/image-20211024155742644.png" alt="set注意事项"></p><h5 id="2-5-sorted-set类型"><a href="#2-5-sorted-set类型" class="headerlink" title="2.5 sorted_set类型"></a>2.5 sorted_set类型</h5><ul><li>新的存储需求： 数据排序有利于数据的有效展示，需要提供一种可以根据自身特征进行排序的方式</li><li>需要新的数据结构： 新的存储模型，可以保存可排序的数据</li><li>sorted_set 字段： 在set 的存储结构基础上添加可排序字段</li></ul><p><img src="/2021/10/23/redis-study/image-20211024161937437.png" alt="sorted_set类型"></p><h6 id="sorted-set数据类型基本操作"><a href="#sorted-set数据类型基本操作" class="headerlink" title="sorted_set数据类型基本操作"></a>sorted_set数据类型基本操作</h6><ul><li><p>添加数据</p><pre class="line-numbers language-none"><code class="language-none">zadd key sorce1(排序字段) member1 [sorce2 member2]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取全部数据(正序/逆序)</p><pre class="line-numbers language-none"><code class="language-none">zrange key start stop [withscores]zrevrange key start stop [withscores]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>删除数据</p><pre class="line-numbers language-none"><code class="language-none">zren key member [member ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/10/23/redis-study/image-20211024162630099.png" alt="sorted_set类型基本操作"></p></li><li><p>按条件获取数据</p><pre class="line-numbers language-none"><code class="language-none">zrangebyscore key min max [withscores] [limit]zrevrangebyscore key max min [withscores]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>按条件删除数据</p><pre class="line-numbers language-none"><code class="language-none">zremrangebyrank key strat stopzremrangebyscore key min max  # max &gt;score &gt;min<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>获取集合数据总量</p><pre class="line-numbers language-none"><code class="language-none">zcard keyzcount key min max<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>集合交，并操作</p><pre class="line-numbers language-none"><code class="language-none">zinterstore destination numkeys(集合个数) key [key ...]zunionstore destination numkeys key [key ...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>合并后value相同的值，score会相加，新集合再进行排序</p></li></ul><h6 id="sorted-set类型数据扩展操作"><a href="#sorted-set类型数据扩展操作" class="headerlink" title="sorted_set类型数据扩展操作"></a>sorted_set类型数据扩展操作</h6><ul><li><p>获取数据对应的索引</p><pre class="line-numbers language-none"><code class="language-none">zrank key memberzrevrank key member<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>score值获取与修改</p><pre class="line-numbers language-none"><code class="language-none">zscore key memberzincrby key increment member<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p><strong>sorted_set类型数据操作的注意事项</strong></p><p><img src="/2021/10/23/redis-study/image-20211024171018363.png" alt="sorted_set类型数据操作的注意事项"></p><h5 id="2-6-通用命令"><a href="#2-6-通用命令" class="headerlink" title="2.6 通用命令"></a>2.6 通用命令</h5><h6 id="key通用操作"><a href="#key通用操作" class="headerlink" title="key通用操作"></a>key通用操作</h6><p>key特征： key 是一个字符串，通过key获取热Redis中保存的数据</p><ul><li><p>删除指定key</p><pre class="line-numbers language-none"><code class="language-none">del key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取key 是否存在</p><pre class="line-numbers language-none"><code class="language-none">exists key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取key的类型</p><pre class="line-numbers language-none"><code class="language-none">type key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h6 id="key扩展操作"><a href="#key扩展操作" class="headerlink" title="key扩展操作"></a>key扩展操作</h6><ul><li><p>为指定key设置有效期</p><pre class="line-numbers language-none"><code class="language-none">expire key secondspexpire key milliseconds(毫秒)expireat key timeout(时间戳)pexpireat key millisecons-timeout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取key的有效时间</p><pre class="line-numbers language-none"><code class="language-none">ttl keypttl key(时间戳)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>切换key从时效性转换为永久性</p><pre class="line-numbers language-none"><code class="language-none">persist key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h6 id="key查询操作"><a href="#key查询操作" class="headerlink" title="key查询操作"></a>key查询操作</h6><ul><li><p>查询key</p><pre class="line-numbers language-none"><code class="language-none">keys pattern(*  ?   [])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/10/23/redis-study/image-20211024202113015.png" alt="查询模式规则"></p></li></ul><h6 id="key其他操作"><a href="#key其他操作" class="headerlink" title="key其他操作"></a>key其他操作</h6><ul><li><p>key改名</p><pre class="line-numbers language-none"><code class="language-none">rename key newkey(如果newkey存在，则覆盖)renamenx key newkey(newkey不存在的情况下)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>为所有key进行排序</p><pre class="line-numbers language-none"><code class="language-none">sort<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>其他key通用操作</p><pre class="line-numbers language-none"><code class="language-none">help @generic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5 id="db通用指令"><a href="#db通用指令" class="headerlink" title="db通用指令"></a>db通用指令</h5><h6 id="数据库基本操作"><a href="#数据库基本操作" class="headerlink" title="数据库基本操作"></a>数据库基本操作</h6><p>redis提供16个数据库，每个数据库之间相互独立</p><ul><li><p>切换数据库</p><pre class="line-numbers language-none"><code class="language-none">select index<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>其他操作</p><pre class="line-numbers language-none"><code class="language-none">quitping (测试服务器) pongecho message(输出日志)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>移动操作</p><pre class="line-numbers language-none"><code class="language-none">move key db   (剪切)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>数据清除</p><pre class="line-numbers language-none"><code class="language-none">dbsize   (查看数据数量)flushdb  (删除当前库数据)flushall  (删除所有库数据)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="解决方案列表"><a href="#解决方案列表" class="headerlink" title="解决方案列表"></a>解决方案列表</h4><p><img src="/2021/10/23/redis-study/image-20211024201016662.png" alt="解决方案列表"></p><h3 id="Jeids"><a href="#Jeids" class="headerlink" title="Jeids"></a>Jeids</h3>]]></content>
      
      
      
        <tags>
            
            <tag> nosql </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
