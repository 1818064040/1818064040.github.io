<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>给懒懒炫耀一下</title>
      <link href="/2021/10/23/gei-lan-lan-xuan-yao-yi-xia/"/>
      <url>/2021/10/23/gei-lan-lan-xuan-yao-yi-xia/</url>
      
        <content type="html"><![CDATA[<h1 id="hello-lanlan"><a href="#hello-lanlan" class="headerlink" title="hello lanlan"></a>hello lanlan</h1><p>就是炫耀一下，什么也没有。</p>]]></content>
      
      
      
        <tags>
            
            <tag> lanlan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git_do</title>
      <link href="/2021/10/23/git-do/"/>
      <url>/2021/10/23/git-do/</url>
      
        <content type="html"><![CDATA[<h1 id="Github使用"><a href="#Github使用" class="headerlink" title="Github使用"></a>Github使用</h1><h2 id="github文件区域"><a href="#github文件区域" class="headerlink" title="github文件区域"></a>github文件区域</h2><pre class="line-numbers language-none"><code class="language-none">1.工作区 workspace未跟踪与未暂存文件处于本区2.暂存区 index提交到仓库之前的缓存区3.仓库* 本地仓库* 远程仓库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GitHub文件状态"><a href="#GitHub文件状态" class="headerlink" title="GitHub文件状态"></a>GitHub文件状态</h2><pre><code>1.未跟踪 untracked    新创建一个文件，处于未跟踪状态，文件位于工作区。2.未暂存 unstaged    修改一个文件，处于未暂存状态，文件位于工作区。3.已暂存     为暂存与为跟踪文件初步提交变为已暂存4.已提交5.不需管理    创建 .gitingore文件，在其中说明不需管理的文件</code></pre><h2 id="GitHub常用命令"><a href="#GitHub常用命令" class="headerlink" title="GitHub常用命令"></a>GitHub常用命令</h2><pre><code>1. git init 初始化git仓库(*)2. git add 工作区文件提交到暂存区  状态：工作区 -&gt; 暂存区    add . :添加所有文件到暂存区    add 文件名 :提交单个文件(*)3. git commit  提交到仓库  暂存区 -&gt; 本地仓库    git commit -m "'说明/标记'"4. git status 查看状态(*)5. git log     打印提交记录(日志)    log --all 显示所有分支    log --pretty=oneline  将提交信息显示为一行    log --abbrey-commit 使得输出的commit更简短    log --graph 以图的方式显示(*)6.git reset --hard commitID(提交记录)  版本回退 还原以前版本7.git reflog 查看删除记录（回滚之后可以看到已经删除的提交记录，包含commit记录）</code></pre><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><pre class="line-numbers language-none"><code class="language-none">为了进行协同开发时，各个用户开发之间互不影响。工作区只能为一个分支进行服务每个分区(*)- git branch   查看本地分支-git branch vv 详细信息(*)- git branch  name(分支名称)  创建新分支  (*)- git checkout name   切换分支(*)- git checkout -b name  切换并创建分支(*)- git merge name  合并提交分支，一个分支上的提交可以合并到另一个分支(*)- git branch -d name 删除分支，删除时做各种检查，只能删除其他分支，不能删除当前分支。、- git branch -D name 强制删除，不做检查<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git远程仓库托管"><a href="#git远程仓库托管" class="headerlink" title="git远程仓库托管"></a>git远程仓库托管</h2><pre class="line-numbers language-none"><code class="language-none">- git config --global user.name username 用户名- git config --global user.email email 邮箱- ssh -keygen -t rsa 请求ssh密钥获取密钥后复制公钥到github,- cat ~/.ssh/id_rsa.pub 获取密钥- ssh -T git@github.com 验证是否连接成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-none"><code class="language-none">- git remote add name(名称）"url(ssh)" 绑定远程仓库- git remote 查看远程仓库- git push [-f]  [--set--upstream] [远端名称[本地分支名][远端分支名]]- git push name（仓库名） name(分支名称) 推送本地分支到远程仓库-git push --set --upstream name（仓库名） name(分支名称) 推送本地分支到远程仓库并建立和远端分支的关联关系-f 强制执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h4><pre class="line-numbers language-none"><code class="language-none">- git clone <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>远程仓库地址 [目录] 将远程仓库克隆到本地</strong></p><h4 id="抓取"><a href="#抓取" class="headerlink" title="抓取"></a>抓取</h4><pre class="line-numbers language-none"><code class="language-none">- git fetch [remote name](远程) [branch name](分支)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    <strong>将仓库中的更新都拉取到本地，但不会进行合并</strong></p><h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><pre class="line-numbers language-none"><code class="language-none">- git merge (remote_name)/(branch_name)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>合并本地分支和远程分支</strong></p><h4 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h4><pre class="line-numbers language-none"><code class="language-none">- git pull [remote name] [branch name]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将仓库中的修改都拉到本地并进行合并，等于  fetch + merge</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis数据库</title>
      <link href="/2021/10/23/redis-xue-xi/"/>
      <url>/2021/10/23/redis-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis数据库"><a href="#Redis数据库" class="headerlink" title="Redis数据库"></a>Redis数据库</h1><h3 id="1-Redis基础"><a href="#1-Redis基础" class="headerlink" title="1.Redis基础"></a>1.Redis基础</h3><h5 id="1-1关系型数据库"><a href="#1-1关系型数据库" class="headerlink" title="1.1关系型数据库"></a>1.1关系型数据库</h5><p>​        关系型数据库：磁盘IO性能低下，数据关系复杂，扩展性差，不利于大规模集群</p><p>​        解决思路：</p><ul><li>降低磁盘IO次数 –&gt;内存存储</li><li>去除数据间关系  –&gt;不存储关系，仅存储数据</li></ul><h5 id="1-2非关系型数据库NOSQL"><a href="#1-2非关系型数据库NOSQL" class="headerlink" title="1.2非关系型数据库NOSQL"></a>1.2非关系型数据库NOSQL</h5><p>NoSQL： Not-Only-SQL (泛指非关系型的数据库)，作为关系型数据库的补冲</p><p>作用： 应对基于海量用户和海量数据前提下的数据处理关系</p><p>特征：</p><ul><li>可扩容，可伸缩</li><li>大数据下高性能</li><li>灵活的数据模型</li><li>高可用</li></ul><p>常见NoSQL数据库：</p><ul><li>Redis</li><li>MongDB</li><li>memcache</li><li>tair</li></ul><h5 id="1-3-Redis"><a href="#1-3-Redis" class="headerlink" title="1.3 Redis"></a>1.3 Redis</h5><p>概念: Redis是用C语言开发的一个开源的<strong>高性能键值对(key-value)数据库</strong></p><p>特征：</p><ol><li> 数据间没有必然的关联关系</li><li> 内部采用单线程机制进行工作</li><li> 高性能</li><li>多数据类型支持<ul><li>字符串类型         string</li><li>列表类型           list</li><li>散列类型           hash</li><li>集合类型           set</li><li>有序集合类型   sorted_set</li></ul></li><li>持久化支持，可以进行数据灾难恢复</li></ol><p>应用：</p><ul><li>热点数据加速查询。</li><li>任务队列，如秒杀，抢购等。</li><li>即时信息查看，排行榜，统计信息等。</li><li>时效信息控制，如验证码。</li><li>分布式数据共享，如分布式架构中的session分离</li><li>消息队列</li><li>分布式锁</li></ul><h5 id="1-4-Redis的基本操作"><a href="#1-4-Redis的基本操作" class="headerlink" title="1.4 Redis的基本操作"></a>1.4 Redis的基本操作</h5><h6 id="a-命令行指令"><a href="#a-命令行指令" class="headerlink" title="a.命令行指令"></a>a.命令行指令</h6><ul><li><p>功能性命令<br>set  key value         存储数据</p><p>get key                     获取数据</p></li><li><p>清除屏幕信息<br>clean                         清除屏幕信息</p></li><li><p>帮助信息查询<br>help  get                   获取get帮助信息<br>help<br>help  set</p></li><li><p>退出<br>quit<br>exit</p></li></ul><h3 id="2-Redis数据类型"><a href="#2-Redis数据类型" class="headerlink" title="2.Redis数据类型"></a>2.Redis数据类型</h3><ul><li>Redis本身是一个Map，其中的数据类型都是key-value 的形式存储</li><li>数据类型指的是存储的数据的类型，也是value部分的类型</li></ul><p><img src="O:/Blogger/source/_posts/image/Redis%E5%AD%A6%E4%B9%A0/image-20211024095746173.png" alt="image-20211024095746173"></p><h5 id="2-1-String类型"><a href="#2-1-String类型" class="headerlink" title="2.1 String类型"></a>2.1 String类型</h5><ul><li>存储的数据：单个数据，最简单的数据存储类型，也是最常用的数据类型。</li><li>存储数据的格式：一个存储空间保存一个数据</li><li>存储内容： 通常使用字符串，如果以整数的形式表示，可以作为数字操作使用</li></ul><h6 id="String类型数据的基本操作"><a href="#String类型数据的基本操作" class="headerlink" title="String类型数据的基本操作"></a>String类型数据的基本操作</h6><ul><li><p>添加/修改数据</p><pre class="line-numbers language-none"><code class="language-none">set key value <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取数据</p><pre class="line-numbers language-none"><code class="language-none">get key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除数据</p><pre class="line-numbers language-none"><code class="language-none">del key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="O:/Blogger/source/_posts/image/Redis%E5%AD%A6%E4%B9%A0/image-20211024100337922.png" alt="image-20211024100337922"></p><ul><li><p>添加/修改多个数据</p><pre class="line-numbers language-none"><code class="language-none">mset key1 value1 key2 value2 ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取多个数据</p><pre class="line-numbers language-none"><code class="language-none">mget key1 key2 ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取数据字符个数(字符串长度)</p><pre class="line-numbers language-none"><code class="language-none">strlen key <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>追加信息到原始信息后部(如果原始信息在就追加,没有就新建)</p><pre class="line-numbers language-none"><code class="language-none">apppend key vaklue <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="O:/Blogger/source/_posts/image/Redis%E5%AD%A6%E4%B9%A0/image-20211024100903392.png" alt="image-20211024100903392"></p><p><strong>单指令，多指令数据操作选择</strong></p><p><img src="O:/Blogger/source/_posts/image/Redis%E5%AD%A6%E4%B9%A0/image-20211024101533114.png" alt="image-20211024101533114"></p><h6 id="String-类型数据的扩展操作"><a href="#String-类型数据的扩展操作" class="headerlink" title="String  类型数据的扩展操作"></a><strong>String  类型数据的扩展操作</strong></h6><p>数据需为整数型/浮点型进行操作</p><ul><li><p>设置数值数据增加指定范围的值</p><pre class="line-numbers language-none"><code class="language-none">incr key incrby key incrementincrbyfloat key increament<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>设置数值数据减少指定范围的值</p><pre class="line-numbers language-none"><code class="language-none">decr key decrby key increment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="O:/Blogger/source/_posts/image/Redis%E5%AD%A6%E4%B9%A0/image-20211024102414465.png" alt="image-20211024102414465"></p></li></ul><ul><li><p>设置数据具有指定的生命周期</p><pre class="line-numbers language-none"><code class="language-none">setex ley seconds value psetex key milliseconds value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>秒/毫秒，赋予数据生命周期，时间到即失效，适用于具有生命周期的项目</p></li></ul><p><img src="O:/Blogger/source/_posts/image/Redis%E5%AD%A6%E4%B9%A0/image-20211024103422749.png" alt="image-20211024103422749"></p><p><strong>String类型数据操作的注意事项</strong></p><p><img src="O:/Blogger/source/_posts/image/Redis%E5%AD%A6%E4%B9%A0/image-20211024103655991.png" alt="image-20211024103655991"></p><p><strong>key的设置约定</strong></p><p><img src="O:/Blogger/source/_posts/image/Redis%E5%AD%A6%E4%B9%A0/image-20211024104202645.png" alt="image-20211024104202645"></p><h5 id="2-2-hash类型"><a href="#2-2-hash类型" class="headerlink" title="2.2 hash类型"></a>2.2 hash类型</h5><p><strong>存储的困惑</strong></p><p><img src="O:/Blogger/source/_posts/image/Redis%E5%AD%A6%E4%B9%A0/image-20211024104437831.png" alt="image-20211024104437831"></p><ul><li>存储形式： key-value(field1value1 field2 value2 )，一个储存空间保存多个键值对3</li><li>hash类型： 底层使用hash表实现数据存储<br>如果field数量较少，存储结构优化为类数组结构<br>如果filed数量较多，存储结构使用HashMap结构</li></ul><h6 id="hash类型数据的基本操作"><a href="#hash类型数据的基本操作" class="headerlink" title="hash类型数据的基本操作"></a>hash类型数据的基本操作</h6><ul><li><p>添加/修改数据</p><pre class="line-numbers language-none"><code class="language-none">hset key field value <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取数据</p><pre class="line-numbers language-none"><code class="language-none">hget key fieldhgetall key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>删除数据</p><pre class="line-numbers language-none"><code class="language-none">hdel key field1 [field2]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="O:/Blogger/source/_posts/image/Redis%E5%AD%A6%E4%B9%A0/image-20211024105357611.png" alt="image-20211024105357611"></p></li><li><p>添加/修改多个数据</p><pre class="line-numbers language-none"><code class="language-none">hmset key field1 value1 field2 value2 ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取多个数据</p><pre class="line-numbers language-none"><code class="language-none">hmget key field1 field2 ...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取哈希表中字段的数量</p><pre class="line-numbers language-none"><code class="language-none">hlen key <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取哈希表中是否存在指定的字段</p><pre class="line-numbers language-none"><code class="language-none">hexists key field<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="O:/Blogger/source/_posts/image/Redis%E5%AD%A6%E4%B9%A0/image-20211024105854308.png" alt="image-20211024105854308"></p><h6 id="hash类型数据库扩展操作"><a href="#hash类型数据库扩展操作" class="headerlink" title="hash类型数据库扩展操作"></a>hash类型数据库扩展操作</h6><ul><li><p>获取哈希表中所有的字段名或字段值</p><pre class="line-numbers language-none"><code class="language-none">hkeys key hvals key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>设置指定字段的数值数据增加指定范围的值</p><pre class="line-numbers language-none"><code class="language-none">hincrby key field incrementhincrbyfloat key field increment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="O:/Blogger/source/_posts/image/Redis%E5%AD%A6%E4%B9%A0/image-20211024110251097.png" alt="image-20211024110251097"></p></li><li><p>保存field前判断，有则不变，无则添加</p><pre class="line-numbers language-none"><code class="language-none">hsetnx key field v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>注意事项</strong></p><p><img src="O:/Blogger/source/_posts/image/Redis%E5%AD%A6%E4%B9%A0/image-20211024110442137.png" alt="image-20211024110442137"></p>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> nosql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
